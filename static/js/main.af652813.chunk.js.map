{"version":3,"sources":["constants.js","initialState.js","reducers.js","store.js","containers/App.js","actions.js","serviceWorker.js","index.js"],"names":["actions","MOVE","SET_DIRECTION","RESTART","directions","size","initialSnake","x","y","initialState","snake","direction","food","isGameOver","highScore","length","getRndInteger","min","max","Math","floor","random","state","action","type","moveX","moveY","newBlock","concat","slice","store","createStore","arguments","undefined","_ret","v","s","find","isBroken","newFoodX","Object","objectSpread","toConsumableArray","newDirection","nextBlock","prevBlock","localStorage","JSON","parse","window","__REDUX_DEVTOOLS_EXTENSION__","App","document","addEventListener","event","code","dispatch","this","interval","setInterval","getState","props","a","Array","i","fill","b","react_default","createElement","className","onClick","restart","bind","map","line","key","block","j","Component","connect","Boolean","location","hostname","match","subscribe","stringify","ReactDOM","render","es","src_containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af652813.chunk.js","sourcesContent":["export const actions = {\n    MOVE: 'MOVE',\n    SET_DIRECTION: 'DIRECTION',\n    RESTART: 'RESTART'\n}\n\nexport const directions = {\n    UP: 'UP',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n    RIGTH: 'RIGHT'\n}\n\nexport const size = {\n    X: 25,\n    Y: 25\n}","import { directions } from './constants'\n\nconst initialSnake = [\n    { x: 10, y: 10 },\n    { x: 11, y: 10 },\n    { x: 12, y: 10 },\n    { x: 13, y: 10 }\n]\n\nconst initialFood = { x: 3, y: 4 }\n\nconst initialState = { snake: initialSnake, direction: directions.RIGTH, food: initialFood, isGameOver: false, highScore: initialSnake.length  }\n\nexport default initialState","import { actions, directions, size } from './constants'\nimport store from './store'\nimport { move } from './actions'\nimport initialState from './initialState'\n\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nexport const state = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.MOVE:\n            if (state.isGameOver) return state\n            let s = snake(state.snake, action)\n            const newBlock = s[s.length - 1]\n            let isGameOver = state.isGameOver || s.slice(0, s.length - 1).find((v) => v.x === newBlock.x && v.y === newBlock.y) !== undefined\n            if (isGameOver) {\n                s[s.length - 1].isBroken = true\n            }\n            let newFoodX = { ...state.food }\n            if (newBlock.x === state.food.x && newBlock.y === state.food.y) {\n                s = [state.snake[0], ...s]\n                while (s.find((v) => v.x === newFoodX.x && v.y === newFoodX.y)) {\n                    newFoodX = {\n                        x: getRndInteger(0, size.X),\n                        y: getRndInteger(0, size.Y)\n                    }\n                }\n            }\n            return {\n                ...state,\n                snake: s,\n                food: newFoodX,\n                isGameOver: isGameOver,\n                highScore: Math.max(state.highScore, s.length)\n            }\n        case actions.SET_DIRECTION: {\n            if (state.isGameOver) return state\n            const newDirection = direction(state.direction, action)\n            let nextBlock = {...state.snake[state.snake.length - 1]}\n            switch (newDirection) {\n                case directions.DOWN:\n                    nextBlock.y++;\n                    break\n                case directions.UP:\n                    nextBlock.y--;\n                    break\n                case directions.LEFT:\n                    nextBlock.x--;\n                    break\n                case directions.RIGTH:\n                    nextBlock.x++;\n                    break\n                default:\n            }\n            const prevBlock = {...state.snake[state.snake.length - 2]}\n            if (nextBlock.x === prevBlock.x && nextBlock.y === prevBlock.y) {\n                return {...state}\n            }\n            return {\n                ...state,\n                direction: newDirection\n            }\n        }\n        case actions.RESTART: { \n            return {\n                ...initialState,\n                highScore: state.highScore\n            }\n        }\n        default: return state\n    }\n}\n\nexport const direction = (state, action) => {\n    switch (action.type) {\n        case actions.SET_DIRECTION: {\n            switch (action.direction) {\n                case directions.DOWN:\n                    if (state !== directions.UP) {\n                        return action.direction\n                    }\n                    return state\n                case directions.UP:\n                    if (state !== directions.DOWN) {\n                        return action.direction\n                    }\n                    return state\n                case directions.LEFT:\n                    if (state !== directions.RIGTH) {\n                        return action.direction\n                    }\n                    return state\n                case directions.RIGTH:\n                    if (state !== directions.LEFT) {\n                        return action.direction\n                    }\n                    return state\n                default: return state\n            }\n        }\n        default: return state\n    }\n}\n\nexport const food = (state, action) => {\n    switch(action.type) {\n        case actions.MOVE_FOOD: \n            return state\n        default: return state\n    }\n}\n\nexport const snake = (state, action) => {\n    switch (action.type) {\n        case actions.MOVE: {\n            let moveX = 0, moveY = 0;\n            switch (action.direction) {\n                case directions.DOWN:\n                    moveY++;\n                    break\n                case directions.RIGTH: \n                    moveX++;\n                    break\n                case directions.LEFT: \n                    moveX--;\n                    break\n                case directions.UP: \n                    moveY--;\n                    break\n                default: break\n            }\n            let newBlock = {\n                x: (state[state.length - 1].x + moveX) < 0 ? size.X - 1 : (state[state.length - 1].x + moveX) % size.X,\n                y: (state[state.length - 1].y + moveY) < 0 ? size.Y - 1 : (state[state.length - 1].y + moveY) % size.Y\n            }\n            return state.concat(newBlock).slice(1, state.length + 1) \n        }\n        default: return state\n    }\n}","import { createStore, combineReducers } from 'redux'\nimport { state } from './reducers'\nimport { directions } from './constants'\nimport initialState from './initialState'\n\nconst store = createStore(\n    state, localStorage['reduxState'] ? JSON.parse(localStorage['reduxState']) : initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nexport default store","import React, { Component, Props } from 'react';\nimport './App.css';\nimport { size, directions } from '../constants'\nimport { connect } from 'react-redux'\nimport store from '../store'\nimport { restart, move, setDirection } from '../actions'\n\nclass App extends Component {\n  componentDidMount() {\n    document.addEventListener('keydown', (event) => {\n      let newDirection = directions.RIGTH\n      switch(event.code) {\n          case 'ArrowDown':\n              newDirection = directions.DOWN\n              break\n          case 'ArrowLeft': \n              newDirection = directions.LEFT\n              break\n          case 'ArrowRight': \n              newDirection = directions.RIGTH\n              break\n          case 'ArrowUp': \n              newDirection = directions.UP\n              break\n          default: break\n      }\n      store.dispatch(setDirection(newDirection))\n    })\n    this.interval = setInterval(() => {\n      store.dispatch(move(store.getState().direction))\n    }, 150)\n  }\n\n  restart() {\n    store.dispatch(restart())\n  }\n\n  render() {\n    const state = this.props.state\n    const snake = state.snake\n    let a = new Array(size.X)\n    for (let i = 0; i < size.X; i++) {\n      a[i] = new Array(size.Y).fill('e')\n    }\n    for (let i = 0;i<this.props.state.snake.length; i++) {\n      const b = snake[i];\n      a[b.y][b.x] = 'c';\n      if (b.isBroken) {\n        a[b.y][b.x] = 'b';\n      }\n    }\n    const food = this.props.state.food\n    a[food.y][food.x] = 'f';\n\n    return <div className=\"map\"><span className=\"scorePanel\"><p className=\"score\">score: {snake.length}</p>\n       {state.isGameOver ? <button onClick={this.restart.bind(this)}>Play again</button> : null }\n      <div className=\"gameOver\">\n        \n      </div>\n      <p className=\"highScore\">high score: {state.highScore}</p></span>\n        {a.map((line, i) => \n        <p className=\"mapLine\" key={i}>{line.map((block, j) => <b className={block} key={j}></b>)}</p>)}\n        </div>\n  }\n}\n\nexport default connect(\n  state => ({\n    state: state\n  })\n)(App);\n","import {actions} from './constants'\n\nexport const move = (direction) => ({\n    type: actions.MOVE,\n    direction: direction\n})\n\nexport const setDirection = (direction) => ({\n    type: actions.SET_DIRECTION,\n    direction: direction\n})\n\nexport const restart = () => ({\n    type: actions.RESTART\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport './index.css'\n\nstore.subscribe(() => {\n    localStorage['reduxState'] = JSON.stringify(store.getState())\n})\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}